// Package parse is responsible for read the json generated by crawler
// and parser values in Resource formats
package parser

import (
    "encoding/json"
    "io/ioutil"
    "strconv"
    "strings"
)

type Resource struct {
    Category string `json:"category"`
    TotalYear float64 `json:"total_year"`
}

// ParseResources receive the path of generated json by crawler
// and read it to parse value
func ParseResources(path string) ([]Resource) {
    data, _ := ioutil.ReadFile(path)

    resourcesArray := []Resource{}

    json_resources := []map[string]string{}
    json.Unmarshal(data, &json_resources)

    for _, json_resource := range json_resources {
        category := json_resource["category"]
        total_year, _ := CleanValue(json_resource["total_year"])

        resource := Resource{category, total_year}
        resourcesArray = append(resourcesArray, resource)
    }

    return resourcesArray
}

// GroupByCategory receive the resources list and group values by category
func GroupByCategory(resources []Resource) ([]Resource){
    resourcesByCategory := make(map[string]float64)

    for _, resource := range resources {
        resourcesByCategory[resource.Category] += resource.TotalYear
    }

    resourcesArray := []Resource{}

    for category, totalYear := range resourcesByCategory {
        resourcesArray = append(resourcesArray, Resource{category, totalYear})
    }

    return resourcesArray
}

// CleanValue is a helper function to parse string into float format
// generally string is in format "130.123,00" and cleanValue converts value
// to float64
func CleanValue(value string) (float64, error) {
    cleanFormat := strings.Replace(value, ".", "", -1)
    floatFormat := strings.Replace(cleanFormat, ",", ".", 1)

    return strconv.ParseFloat(floatFormat, 64)
}
